[
  {
    "tags": [],
    "description": {
      "full": "<p>Module dependencies</p>",
      "summary": "<p>Module dependencies</p>",
      "body": ""
    },
    "ignore": false,
    "code": "var fs = require('fs'),\n    crypto = require('crypto'),\n    Handlebars = require('handlebars');",
    "ctx": {
      "type": "declaration",
      "name": "fs",
      "value": "require('fs'),",
      "string": "fs"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Global templates</p>",
      "summary": "<p>Global templates</p>",
      "body": ""
    },
    "ignore": false,
    "code": "var T = {\n  link: Handlebars.compile(fs.readFileSync(\n                __dirname + '/templates/link.html', 'utf8')),\n  layout: Handlebars.compile(fs.readFileSync(\n                __dirname + '/templates/layout.html', 'utf8')),\n  section: Handlebars.compile(fs.readFileSync(\n                __dirname + '/templates/section.html', 'utf8'))\n};",
    "ctx": {
      "type": "declaration",
      "name": "T",
      "value": "{",
      "string": "T"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String",
          "Object"
        ],
        "name": "dox",
        "description": ""
      },
      {
        "type": "return",
        "types": [
          "String"
        ],
        "description": ""
      }
    ],
    "description": {
      "full": "<p>Expose <code>Doxen</code><br />- Returns an html representation of dox object <code>dox</code></p>",
      "summary": "<p>Expose <code>Doxen</code><br />- Returns an html representation of dox object <code>dox</code></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "var Doxen = module.exports = function doxen(dox) {\n  if(typeof dox !== 'object') {\n    try {\n      dox = JSON.parse(json);\n    } catch(e) {\n      return 'Invalid json';\n    }\n  }\n\n  return build(dox);\n};",
    "ctx": {
      "type": "declaration",
      "name": "Doxen",
      "value": "module.exports = function doxen(dox) {",
      "string": "Doxen"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "Object"
        ],
        "name": "dox",
        "description": ""
      },
      {
        "type": "param",
        "types": [
          "Object"
        ],
        "name": "data",
        "description": ""
      }
    ],
    "description": {
      "full": "<p>Expose the full render functionality<br />- Rendered the given <code>obj</code> to the template</p>",
      "summary": "<p>Expose the full render functionality<br />- Rendered the given <code>obj</code> to the template</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "Doxen.render = function render(dox, data) {\n  data = data || {};\n  data.title = data.title || 'Doxen';\n  data.content = data.content || build(dox);\n\n  return T.layout(data);\n}",
    "ctx": {
      "type": "method",
      "receiver": "Doxen",
      "name": "render",
      "string": "Doxen.render()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "Object"
        ],
        "name": "dox",
        "description": ""
      },
      {
        "type": "return",
        "types": [
          "Object"
        ],
        "description": ""
      }
    ],
    "description": {
      "full": "<p>Build docs</p>",
      "summary": "<p>Build docs</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "function build(dox) {\n  var i, len,\n      nav = '<nav><dl>',\n      docs = '<div>';\n\n  for(i = 0, len = dox.length; i < len; i = i + 1) {\n    nav += navigation(dox[i]);\n    docs += block(dox[i]);\n  }\n\n  nav += '</dl></nav>';\n  docs += '</div>';\n\n  return nav + docs;\n}",
    "ctx": {
      "type": "function",
      "name": "build",
      "string": "build()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "Object"
        ],
        "name": "chunk",
        "description": ""
      },
      {
        "type": "return",
        "types": [
          "String"
        ],
        "description": ""
      }
    ],
    "description": {
      "full": "<p>Build the navigation pane for a block</p>",
      "summary": "<p>Build the navigation pane for a block</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "function navigation(chunk) {\n  var data = {\n    id: makeId(chunk.code),\n    title: chunk.ctx.string,\n    description: chunk.description.summary\n  };\n\n  return T.link(data);\n}",
    "ctx": {
      "type": "function",
      "name": "navigation",
      "string": "navigation()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "Object"
        ],
        "name": "chunk",
        "description": ""
      },
      {
        "type": "return",
        "types": [
          "String"
        ],
        "description": ""
      }
    ],
    "description": {
      "full": "<p>Build the section for given <code>chunk</code></p>",
      "summary": "<p>Build the section for given <code>chunk</code></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "function block(chunk) {\n  var data = {\n    code: chunk.code,\n    title: chunk.ctx.string,\n    id: makeId(chunk.code),\n    type: chunk.ctx.type,\n    description: chunk.description.full,\n    params: chunk.tags.filter(function(tag) {\n      return tag.type === 'param';\n    }).map(function(tag) {\n      return {\n        types: tag.types.join(', '),\n        name: tag.name,\n        description: tag.description\n      };\n    })\n  };\n  \n  return T.section(data);\n}",
    "ctx": {
      "type": "function",
      "name": "block",
      "string": "block()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String"
        ],
        "name": "code",
        "description": ""
      },
      {
        "type": "return",
        "types": [
          "String"
        ],
        "description": ""
      }
    ],
    "description": {
      "full": "<p>Return a hash of <code>code</code> to use for element id</p>",
      "summary": "<p>Return a hash of <code>code</code> to use for element id</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "function makeId(code) {\n  return crypto.createHash('md5').update(code).digest('hex').slice(0, 10);\n}",
    "ctx": {
      "type": "function",
      "name": "makeId",
      "string": "makeId()"
    }
  }
]